version: '2.4'

## Port Assignments:
##  See .env file

## Container debugging: 
# 1. append the following lines to desired container 
# 2. boot up the container using `docker-compose up -d`
# 3 run `docker exec -it <container-name> bash` to start interactive shell
# 
#    tty: true
#    stdin_open: true
#    entrypoint: bash

services:
  ###
  # nginx reverse proxy
  # TODO: set up to use non-root user. See https://www.rockyourcode.com/run-docker-nginx-as-non-root-user/
  ###
  nginx:
    profiles: ["core"]
    image: nginx:latest
    container_name: nginx
    hostname: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certs:/etc/letsencrypt
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - nginx-data:/var/www
    networks:
      - hie
    logging:
      options:
        max-size: "10k"
        max-file: "3"

  certbot:
    profiles: ["support"]
    image: certbot/dns-route53
    container_name: certbot
    entrypoint: "certbot certonly -n --agree-tos --email pmanko@uw.edu -d 'moh.org.bw' -d '*.moh.org.bw' --dns-route53 --preferred-challenges=dns"
    environment:
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    volumes:
    - certs:/etc/letsencrypt
    - letsencrypt:/var/lib/letsencrypt
    networks:
    - hie

  ###
  # OpenCR
  ###
  opencr:
    profiles: ["mediator"]
    container_name: opencr
    hostname: opencr
    image: intrahealth/opencr:latest
    restart: unless-stopped
    environment:
      - NODE_ENV=docker
      - HAPI_FHIR_URL=http://opencr-fhir:8080/fhir/metadata
    networks:
      - hie
    volumes:
      - ./configs/opencr/config_port.json:/src/server/config/config_docker.json
      - ./configs/opencr/mediator_port.json:/src/server/config/mediator.json

  opencr-fhir:
    profiles: ["core"]
    image: hapiproject/hapi:latest
    container_name: opencr-fhir
    hostname: opencr-fhir
    restart: unless-stopped
    networks:
      - hie
    healthcheck:
      test: "curl -sS http://opencr-fhir:8080/fhir/metadata || exit 1"
      interval: 90s
      timeout: 30s
      retries: 3
    volumes:
      - cr-data:/data/hapi

  opencr-es:
    profiles: ["core"]
    container_name: es
    image: intrahealth/elasticsearch:latest
    restart: unless-stopped
    environment:
      - node.name=es01
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es:/usr/share/elasticsearch/data
    networks:
      - hie

  ###
  # SHR
  ###
  shr:
    profiles: ["mediator"]
    container_name: shr
    hostname: shr
    image: ghcr.io/i-tech-uw/shared-health-record:${SHR_VERSION}
    restart: unless-stopped
    environment:
      - NODE_ENV=docker
    networks:
      - hie
    volumes:
      - ./configs/shr/config_docker_template.json:/app/config/config_docker.json
      - ./configs/shr/mediator.json:/app/config/mediator_docker.json

  shr-fhir:
    profiles: ["core"]
    image: hapiproject/hapi:latest
    container_name: shr-fhir
    hostname: shr-fhir
    restart: unless-stopped
    volumes:
      - shr-data:/data/hapi
    networks:
      - hie
    healthcheck:
      test: "curl -sS http://shr-fhir:8080/fhir/metadata || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3

  ###
  # OpenHIM
  ###
  openhim-core:
    profiles: ["core"]
    container_name: openhim-core
    hostname: openhim-core
    image: jembi/openhim-core:latest
    restart: unless-stopped
    environment:
      mongo_url: "mongodb://mongo-db/openhim"
      mongo_atnaUrl: "mongodb://mongo-db/openhim"
      NODE_ENV: "development"
    healthcheck:
      test: "curl -sSk https://openhim-core:8080/heartbeat || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - hie

  openhim-console:
    profiles: ["core"]
    container_name: openhim-console
    hostname: openhim-console
    image: jembi/openhim-console:latest
    restart: unless-stopped
    volumes:
      - ./configs/openhim-console/port.json:/usr/share/nginx/html/config/default.json
    healthcheck:
      test: "curl -sS http://openhim-console || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - hie

  mongo-db:
    profiles: ["core"]
    container_name: mongo-db
    image: mongo:3.4
    volumes:
      - "mongo-data:/data/db"
    restart: unless-stopped
    networks:
      - hie

  fhir-converter:
    profiles: ["mediator"]
    container_name: fhir-converter
    hostname: fhir-converter
    restart: unless-stopped
    image: ghcr.io/b-techbw/openhim-mediator-fhir-converter:${FHIR_CONVERTER_VERSION}
    volumes:
      - ./configs/fhir-converter/config_port.json:/app/config.json
      - /app/src/service-templates
    networks:
      - hie
  
  # Kafka
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    hostname: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
    - hie
  kafka:
    image: 'bitnami/kafka:latest'
    hostname: kafka
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka-data:/bitnami/kafka
    depends_on:
      - zookeeper
    networks:
    - hie
    entrypoint: sh -c 'sleep 30 && /opt/bitnami/scripts/kafka/entrypoint.sh /opt/bitnami/scripts/kafka/run.sh' # prevent zookeeper conflict error

  # Newman Tests
  newman:
    profiles: ["test"]
    image: postman/newman
    volumes:
      - ./.postman:/.postman
    entrypoint: newman run $POSTMAN_COLLECTION -e /.postman/postman_env.ci.json --insecure --timeout-request 20000 --delay-request 500
    networks:
      - hie

  mllp_tests:
    profiles: ["test"]
    container_name: mllp_tests
    image: ghcr.io/b-techbw/mllp-tester:latest
    networks:
      - hie

volumes:
  es:
    driver: local
  mongo-data:
    driver: local
  sqldata:
    driver: local
  shr-data:
    driver: local
  cr-data:
    driver: local
  nginx-data:
    driver: local
  certs:
    driver: local
  letsencrypt:
    driver: local
  kafka-data:
    driver: local
networks:
  hie:
