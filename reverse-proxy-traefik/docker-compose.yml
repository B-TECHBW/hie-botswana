version: '3.9'

services:
  # Proxies requests to internal services
  reverse-proxy-traefik:
    image: traefik:v2.8.3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # admin-auth middleware with HTTP Basic auth
        # Using the environment variables USERNAME and HASHED_PASSWORD
        #- traefik.http.middlewares.admin-auth.basicauth.users=admin:
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-http.rule=Host(`hie-pilot.gov.bw`) && PathPrefix(`/dashboard`) || PathPrefix(`/api`)
        - traefik.http.routers.traefik-public-http.entrypoints=web
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-https.rule=Host(`hie-pilot.gov.bw`) && PathPrefix(`/dashboard`) || PathPrefix(`/api`)
        - traefik.http.routers.traefik-public-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal
        # Enable HTTP Basic auth, using the middleware created above
        #- traefik.http.routers.traefik-public-https.middlewares=admin-auth
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
        - traefik.http.routers.traefik-public-https.entrypoints=web-secure
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    ports:
      - '80:80'
      - '443:443'
    configs:
      - source: certs.yml
        target: /etc/traefik/dynamic_conf/certs.yml
      - source: selfsigned.crt
        target: /etc/certs/selfsigned.crt
      - source: selfsigned.key
        target: /etc/certs/selfsigned.key

    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik
    command:
      - --providers.file.directory=/etc/traefik/dynamic_conf/
      - --providers.file.watch=true
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.web.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.web-secure.address=:443
      # Skip verification of SSL validity for domains (useful for internal services)
      - --serversTransport.insecureSkipVerify=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      - --log.level=DEBUG
      # # Enable the Dashboard and API
      # - --api
      # - --api.dashboard=true
      # - --api.insecure=false

configs:
  certs.yml:
    file: ./crts/certs.yml
    name: certs.yml
    labels:
      name: traefik
  selfsigned.crt:
    file: ./crts/hie-pilot.gov.bw/cert.pem
    name: selfsigned.crt
    labels:
      name: traefik
  selfsigned.key:
    file: ./crts/hie-pilot.gov.bw/key.pem
    name: selfsigned.key
    labels:
      name: traefik
networks:
  traefik:
    name: traefik-public
    external: true
